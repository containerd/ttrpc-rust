// This file is generated by ttrpc-codegen 1.0.0. Do not edit
// @generated

#[derive(::serde::Serialize, ::serde::Deserialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EchoPayload {
    #[prost(uint32, tag = "1")]
    pub seq: u32,
    #[prost(string, tag = "2")]
    pub msg: ::prost::alloc::string::String,
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Part {
    #[prost(int32, tag = "1")]
    pub add: i32,
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sum {
    #[prost(int32, tag = "1")]
    pub sum: i32,
    #[prost(int32, tag = "2")]
    pub num: i32,
}
use std::collections::HashMap;
use std::sync::Arc;
use prost::Message;
use async_trait::async_trait;
#[async_trait]
pub trait Streaming: Sync {
    async fn echo(
        &self,
        _ctx: &::ttrpc::r#async::TtrpcContext,
        _: EchoPayload,
    ) -> ::ttrpc::Result<EchoPayload> {
        Err(
            ::ttrpc::Error::RpcStatus(
                ::ttrpc::get_status(
                    ::ttrpc::Code::NotFound,
                    "streaming.Streaming/Echo is not supported",
                ),
            ),
        )
    }
    async fn echo_stream(
        &self,
        _ctx: &::ttrpc::r#async::TtrpcContext,
        _: ::ttrpc::r#async::ServerStream<EchoPayload, EchoPayload>,
    ) -> ::ttrpc::Result<()> {
        Err(
            ::ttrpc::Error::RpcStatus(
                ::ttrpc::get_status(
                    ::ttrpc::Code::NotFound,
                    "streaming.Streaming/EchoStream is not supported",
                ),
            ),
        )
    }
    async fn sum_stream(
        &self,
        _ctx: &::ttrpc::r#async::TtrpcContext,
        _: ::ttrpc::r#async::ServerStreamReceiver<Part>,
    ) -> ::ttrpc::Result<Sum> {
        Err(
            ::ttrpc::Error::RpcStatus(
                ::ttrpc::get_status(
                    ::ttrpc::Code::NotFound,
                    "streaming.Streaming/SumStream is not supported",
                ),
            ),
        )
    }
    async fn divide_stream(
        &self,
        _ctx: &::ttrpc::r#async::TtrpcContext,
        _: Sum,
        _: ::ttrpc::r#async::ServerStreamSender<Part>,
    ) -> ::ttrpc::Result<()> {
        Err(
            ::ttrpc::Error::RpcStatus(
                ::ttrpc::get_status(
                    ::ttrpc::Code::NotFound,
                    "streaming.Streaming/DivideStream is not supported",
                ),
            ),
        )
    }
    async fn echo_null(
        &self,
        _ctx: &::ttrpc::r#async::TtrpcContext,
        _: ::ttrpc::r#async::ServerStreamReceiver<EchoPayload>,
    ) -> ::ttrpc::Result<super::google::protobuf::Empty> {
        Err(
            ::ttrpc::Error::RpcStatus(
                ::ttrpc::get_status(
                    ::ttrpc::Code::NotFound,
                    "streaming.Streaming/EchoNull is not supported",
                ),
            ),
        )
    }
    async fn echo_null_stream(
        &self,
        _ctx: &::ttrpc::r#async::TtrpcContext,
        _: ::ttrpc::r#async::ServerStream<super::google::protobuf::Empty, EchoPayload>,
    ) -> ::ttrpc::Result<()> {
        Err(
            ::ttrpc::Error::RpcStatus(
                ::ttrpc::get_status(
                    ::ttrpc::Code::NotFound,
                    "streaming.Streaming/EchoNullStream is not supported",
                ),
            ),
        )
    }
}
struct EchoMethod {
    service: Arc<Box<dyn Streaming + Send + Sync>>,
}
#[async_trait]
impl ::ttrpc::r#async::MethodHandler for EchoMethod {
    async fn handler(
        &self,
        ctx: ::ttrpc::r#async::TtrpcContext,
        req: ::ttrpc::Request,
    ) -> ::ttrpc::Result<::ttrpc::Response> {
        ::ttrpc::async_request_handler!(self, ctx, req, EchoPayload, echo);
    }
}
struct EchoStreamMethod {
    service: Arc<Box<dyn Streaming + Send + Sync>>,
}
#[async_trait]
impl ::ttrpc::r#async::StreamHandler for EchoStreamMethod {
    async fn handler(
        &self,
        ctx: ::ttrpc::r#async::TtrpcContext,
        inner: ::ttrpc::r#async::StreamInner,
    ) -> ::ttrpc::Result<Option<::ttrpc::Response>> {
        ::ttrpc::async_duplex_streamimg_handler!(self, ctx, inner, echo_stream);
    }
}
struct SumStreamMethod {
    service: Arc<Box<dyn Streaming + Send + Sync>>,
}
#[async_trait]
impl ::ttrpc::r#async::StreamHandler for SumStreamMethod {
    async fn handler(
        &self,
        ctx: ::ttrpc::r#async::TtrpcContext,
        inner: ::ttrpc::r#async::StreamInner,
    ) -> ::ttrpc::Result<Option<::ttrpc::Response>> {
        ::ttrpc::async_client_streamimg_handler!(self, ctx, inner, sum_stream);
    }
}
struct DivideStreamMethod {
    service: Arc<Box<dyn Streaming + Send + Sync>>,
}
#[async_trait]
impl ::ttrpc::r#async::StreamHandler for DivideStreamMethod {
    async fn handler(
        &self,
        ctx: ::ttrpc::r#async::TtrpcContext,
        mut inner: ::ttrpc::r#async::StreamInner,
    ) -> ::ttrpc::Result<Option<::ttrpc::Response>> {
        ::ttrpc::async_server_streamimg_handler!(self, ctx, inner, Sum, divide_stream);
    }
}
struct EchoNullMethod {
    service: Arc<Box<dyn Streaming + Send + Sync>>,
}
#[async_trait]
impl ::ttrpc::r#async::StreamHandler for EchoNullMethod {
    async fn handler(
        &self,
        ctx: ::ttrpc::r#async::TtrpcContext,
        inner: ::ttrpc::r#async::StreamInner,
    ) -> ::ttrpc::Result<Option<::ttrpc::Response>> {
        ::ttrpc::async_client_streamimg_handler!(self, ctx, inner, echo_null);
    }
}
struct EchoNullStreamMethod {
    service: Arc<Box<dyn Streaming + Send + Sync>>,
}
#[async_trait]
impl ::ttrpc::r#async::StreamHandler for EchoNullStreamMethod {
    async fn handler(
        &self,
        ctx: ::ttrpc::r#async::TtrpcContext,
        inner: ::ttrpc::r#async::StreamInner,
    ) -> ::ttrpc::Result<Option<::ttrpc::Response>> {
        ::ttrpc::async_duplex_streamimg_handler!(self, ctx, inner, echo_null_stream);
    }
}
pub fn create_streaming(
    service: Arc<Box<dyn Streaming + Send + Sync>>,
) -> HashMap<String, ::ttrpc::r#async::Service> {
    let mut ret = HashMap::new();
    let mut methods = HashMap::new();
    let mut streams = HashMap::new();
    methods
        .insert(
            "Echo".to_string(),
            Box::new(EchoMethod {
                service: service.clone(),
            }) as Box<dyn ::ttrpc::r#async::MethodHandler + Send + Sync>,
        );
    streams
        .insert(
            "EchoStream".to_string(),
            Arc::new(EchoStreamMethod {
                service: service.clone(),
            }) as Arc<dyn ::ttrpc::r#async::StreamHandler + Send + Sync>,
        );
    streams
        .insert(
            "SumStream".to_string(),
            Arc::new(SumStreamMethod {
                service: service.clone(),
            }) as Arc<dyn ::ttrpc::r#async::StreamHandler + Send + Sync>,
        );
    streams
        .insert(
            "DivideStream".to_string(),
            Arc::new(DivideStreamMethod {
                service: service.clone(),
            }) as Arc<dyn ::ttrpc::r#async::StreamHandler + Send + Sync>,
        );
    streams
        .insert(
            "EchoNull".to_string(),
            Arc::new(EchoNullMethod {
                service: service.clone(),
            }) as Arc<dyn ::ttrpc::r#async::StreamHandler + Send + Sync>,
        );
    streams
        .insert(
            "EchoNullStream".to_string(),
            Arc::new(EchoNullStreamMethod {
                service: service.clone(),
            }) as Arc<dyn ::ttrpc::r#async::StreamHandler + Send + Sync>,
        );
    ret.insert(
        "streaming.Streaming".to_string(),
        ::ttrpc::r#async::Service {
            methods,
            streams,
        },
    );
    ret
}
#[derive(Clone)]
pub struct StreamingClient {
    client: ::ttrpc::r#async::Client,
}
impl StreamingClient {
    pub fn new(client: ::ttrpc::r#async::Client) -> Self {
        StreamingClient { client }
    }
}
impl StreamingClient {
    pub async fn echo(
        &self,
        ctx: ::ttrpc::context::Context,
        req: &EchoPayload,
    ) -> ::ttrpc::Result<EchoPayload> {
        let mut cres = EchoPayload::default();
        ::ttrpc::async_client_request!(
            self, ctx, req, "streaming.Streaming", "Echo", cres
        );
    }
    pub async fn echo_stream(
        &self,
        ctx: ::ttrpc::context::Context,
    ) -> ::ttrpc::Result<::ttrpc::r#async::ClientStream<EchoPayload, EchoPayload>> {
        ::ttrpc::async_client_stream!(self, ctx, "streaming.Streaming", "EchoStream");
    }
    pub async fn sum_stream(
        &self,
        ctx: ::ttrpc::context::Context,
    ) -> ::ttrpc::Result<::ttrpc::r#async::ClientStreamSender<Part, Sum>> {
        ::ttrpc::async_client_stream_send!(
            self, ctx, "streaming.Streaming", "SumStream"
        );
    }
    pub async fn divide_stream(
        &self,
        ctx: ::ttrpc::context::Context,
        req: &Sum,
    ) -> ::ttrpc::Result<::ttrpc::r#async::ClientStreamReceiver<Part>> {
        ::ttrpc::async_client_stream_receive!(
            self, ctx, req, "streaming.Streaming", "DivideStream"
        );
    }
    pub async fn echo_null(
        &self,
        ctx: ::ttrpc::context::Context,
    ) -> ::ttrpc::Result<
        ::ttrpc::r#async::ClientStreamSender<EchoPayload, super::google::protobuf::Empty>,
    > {
        ::ttrpc::async_client_stream_send!(self, ctx, "streaming.Streaming", "EchoNull");
    }
    pub async fn echo_null_stream(
        &self,
        ctx: ::ttrpc::context::Context,
    ) -> ::ttrpc::Result<
        ::ttrpc::r#async::ClientStream<EchoPayload, super::google::protobuf::Empty>,
    > {
        ::ttrpc::async_client_stream!(
            self, ctx, "streaming.Streaming", "EchoNullStream"
        );
    }
}
