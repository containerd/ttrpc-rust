// This file is generated by ttrpc-codegen 1.0.0. Do not edit
// @generated

#[derive(::serde::Serialize, ::serde::Deserialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IpAddress {
    #[prost(enumeration = "IpFamily", tag = "1")]
    pub family: i32,
    #[prost(string, tag = "2")]
    pub address: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub mask: ::prost::alloc::string::String,
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Interface {
    #[prost(string, tag = "1")]
    pub device: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub ip_addresses: ::prost::alloc::vec::Vec<IpAddress>,
    #[prost(uint64, tag = "4")]
    pub mtu: u64,
    #[prost(string, tag = "5")]
    pub hw_addr: ::prost::alloc::string::String,
    /// pciAddr is the PCI address in the format  "bridgeAddr/deviceAddr".
    /// Here, bridgeAddr is the address at which the bridge is attached on the root bus,
    /// while deviceAddr is the address at which the network device is attached on the bridge.
    #[prost(string, tag = "6")]
    pub pci_addr: ::prost::alloc::string::String,
    /// Type defines the type of interface described by this structure.
    /// The expected values are the one that are defined by the netlink
    /// library, regarding each type of link. Here is a non exhaustive
    /// list: "veth", "macvtap", "vlan", "macvlan", "tap", ...
    #[prost(string, tag = "7")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(uint32, tag = "8")]
    pub raw_flags: u32,
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Route {
    #[prost(string, tag = "1")]
    pub dest: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub gateway: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub device: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub source: ::prost::alloc::string::String,
    #[prost(uint32, tag = "5")]
    pub scope: u32,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum IpFamily {
    V4 = 0,
    V6 = 1,
}
impl IpFamily {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            IpFamily::V4 => "v4",
            IpFamily::V6 => "v6",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "v4" => Some(Self::V4),
            "v6" => Some(Self::V6),
            _ => None,
        }
    }
}
