// This file is generated by ttrpc-codegen 1.0.0. Do not edit
// @generated

#[derive(::serde::Serialize, ::serde::Deserialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CheckRequest {
    #[prost(string, tag = "1")]
    pub service: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "2")]
    pub option_val: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HealthCheckResponse {
    #[prost(enumeration = "health_check_response::ServingStatus", tag = "1")]
    pub status: i32,
}
/// Nested message and enum types in `HealthCheckResponse`.
pub mod health_check_response {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum ServingStatus {
        Unknown = 0,
        Serving = 1,
        NotServing = 2,
    }
    impl ServingStatus {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                ServingStatus::Unknown => "UNKNOWN",
                ServingStatus::Serving => "SERVING",
                ServingStatus::NotServing => "NOT_SERVING",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UNKNOWN" => Some(Self::Unknown),
                "SERVING" => Some(Self::Serving),
                "NOT_SERVING" => Some(Self::NotServing),
                _ => None,
            }
        }
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VersionCheckResponse {
    #[prost(string, tag = "1")]
    pub grpc_version: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub agent_version: ::prost::alloc::string::String,
}
use std::collections::HashMap;
use std::sync::Arc;
use prost::Message;
pub trait Health {
    fn check(
        &self,
        _ctx: &::ttrpc::TtrpcContext,
        _: CheckRequest,
    ) -> ::ttrpc::Result<HealthCheckResponse> {
        Err(
            ::ttrpc::Error::RpcStatus(
                ::ttrpc::get_status(
                    ::ttrpc::Code::NotFound,
                    "health.Health/Check is not supported",
                ),
            ),
        )
    }
    fn version(
        &self,
        _ctx: &::ttrpc::TtrpcContext,
        _: CheckRequest,
    ) -> ::ttrpc::Result<VersionCheckResponse> {
        Err(
            ::ttrpc::Error::RpcStatus(
                ::ttrpc::get_status(
                    ::ttrpc::Code::NotFound,
                    "health.Health/Version is not supported",
                ),
            ),
        )
    }
}
struct CheckMethod {
    service: Arc<Box<dyn Health + Send + Sync>>,
}
impl ::ttrpc::MethodHandler for CheckMethod {
    fn handler(
        &self,
        ctx: ::ttrpc::TtrpcContext,
        req: ::ttrpc::Request,
    ) -> ::ttrpc::Result<()> {
        ::ttrpc::request_handler!(self, ctx, req, CheckRequest, check);
        Ok(())
    }
}
struct VersionMethod {
    service: Arc<Box<dyn Health + Send + Sync>>,
}
impl ::ttrpc::MethodHandler for VersionMethod {
    fn handler(
        &self,
        ctx: ::ttrpc::TtrpcContext,
        req: ::ttrpc::Request,
    ) -> ::ttrpc::Result<()> {
        ::ttrpc::request_handler!(self, ctx, req, CheckRequest, version);
        Ok(())
    }
}
pub fn create_health(
    service: Arc<Box<dyn Health + Send + Sync>>,
) -> HashMap<String, Box<dyn ::ttrpc::MethodHandler + Send + Sync>> {
    let mut methods = HashMap::new();
    methods
        .insert(
            "/health.Health/Check".to_string(),
            Box::new(CheckMethod {
                service: service.clone(),
            }) as Box<dyn ::ttrpc::MethodHandler + Send + Sync>,
        );
    methods
        .insert(
            "/health.Health/Version".to_string(),
            Box::new(VersionMethod {
                service: service.clone(),
            }) as Box<dyn ::ttrpc::MethodHandler + Send + Sync>,
        );
    methods
}
#[derive(Clone)]
pub struct HealthClient {
    client: ::ttrpc::Client,
}
impl HealthClient {
    pub fn new(client: ::ttrpc::Client) -> Self {
        HealthClient { client }
    }
}
impl HealthClient {
    pub fn check(
        &self,
        ctx: ::ttrpc::context::Context,
        req: &CheckRequest,
    ) -> ::ttrpc::Result<HealthCheckResponse> {
        let mut cres = HealthCheckResponse::default();
        ::ttrpc::client_request!(self, ctx, req, "health.Health", "Check", cres);
        Ok(cres)
    }
    pub fn version(
        &self,
        ctx: ::ttrpc::context::Context,
        req: &CheckRequest,
    ) -> ::ttrpc::Result<VersionCheckResponse> {
        let mut cres = VersionCheckResponse::default();
        ::ttrpc::client_request!(self, ctx, req, "health.Health", "Version", cres);
        Ok(cres)
    }
}
